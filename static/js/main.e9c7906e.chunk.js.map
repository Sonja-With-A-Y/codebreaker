{"version":3,"sources":["GuessPeg.js","ColorPicker.js","PegGridRow.js","PegGrid.js","GameBoard.js","GameContainer.js","App.js","index.js"],"names":["GuessPeg","props","rowNum","colNum","pegColor","guessPegColors","onClick","handleGuessPegColorChange","className","style","color","ColorPicker","handleColorPick","PegGridRow","blackPegs","whitePegs","PegGrid","GameBoard","answer","useState","setBlackPegs","setWhitePegs","turnNum","setTurnNum","chosenColor","setChosenColor","setGuessPegColors","turnDisplay","setTurnDisplay","gameOver","setGameOver","prevState","type","includes","win","JSON","stringify","tempAnswer","slice","whiteCheck","blackCount","i","push","whiteCount","length","indexOf","toString","handleSubmit","GameContainer","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9c7906e.chunk.js","sourcesContent":["import { VscCircleLargeFilled } from \"react-icons/vsc\";\r\n\r\nexport default function GuessPeg(props) {\r\n  const rowNum = props.rowNum\r\n  const colNum = props.colNum\r\n  const pegColor = (props) ? props.guessPegColors[rowNum][colNum] : \"grey\"\r\n\r\n  return(\r\n    <VscCircleLargeFilled onClick={ () => props.handleGuessPegColorChange(rowNum, colNum) } className=\"peg-hole\" style={{color: pegColor }} />\r\n  )\r\n}\r\n","import { VscCircleLargeFilled } from \"react-icons/vsc\";\r\n\r\nexport default function ColorPicker(props) {\r\n  return(\r\n    <VscCircleLargeFilled onClick={ () => props.handleColorPick(props.color) } className=\"color-picker\" style={{color: props.color}} />\r\n  )\r\n}\r\n","import GuessPeg from \"./GuessPeg\"\r\nimport ColorPicker from \"./ColorPicker\"\r\n\r\nexport default function PegGridRow(props) {\r\n  return(\r\n    <tr>\r\n      <td>{props.blackPegs[props.rowNum]}B<br />{props.whitePegs[props.rowNum]}W</td>\r\n      <td><GuessPeg handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} rowNum={props.rowNum} colNum=\"0\" /></td>\r\n      <td><GuessPeg handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} rowNum={props.rowNum} colNum=\"1\" /></td>\r\n      <td><GuessPeg handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} rowNum={props.rowNum} colNum=\"2\" /></td>\r\n      <td><GuessPeg handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} rowNum={props.rowNum} colNum=\"3\" /></td>\r\n      <td><GuessPeg handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} rowNum={props.rowNum} colNum=\"4\" /></td>\r\n      <td><ColorPicker handleColorPick={props.handleColorPick} color={props.color} /></td>\r\n      </tr>\r\n  )\r\n}\r\n","import PegGridRow from \"./PegGridRow\"\r\n\r\nexport default function PegGrid(props) {\r\n  return(\r\n    <table>\r\n      <tbody>\r\n        <PegGridRow handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} handleColorPick={props.handleColorPick} blackPegs={props.blackPegs} whitePegs={props.whitePegs} rowNum=\"5\" color=\"red\" />\r\n        <PegGridRow handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} handleColorPick={props.handleColorPick} blackPegs={props.blackPegs} whitePegs={props.whitePegs} rowNum=\"4\" color=\"green\" />\r\n        <PegGridRow handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} handleColorPick={props.handleColorPick} blackPegs={props.blackPegs} whitePegs={props.whitePegs} rowNum=\"3\" color=\"blue\" />\r\n        <PegGridRow handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} handleColorPick={props.handleColorPick} blackPegs={props.blackPegs} whitePegs={props.whitePegs} rowNum=\"2\" color=\"yellow\" />\r\n        <PegGridRow handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} handleColorPick={props.handleColorPick} blackPegs={props.blackPegs} whitePegs={props.whitePegs} rowNum=\"1\" color=\"purple\" />\r\n        <PegGridRow handleGuessPegColorChange={props.handleGuessPegColorChange} guessPegColors={props.guessPegColors} handleColorPick={props.handleColorPick} blackPegs={props.blackPegs} whitePegs={props.whitePegs} rowNum=\"0\" color=\"pink\" />\r\n      </tbody>\r\n    </table>\r\n  )\r\n}","import React, { useState } from 'react';\r\nimport PegGrid from \"./PegGrid\"\r\nimport { VscCircleLargeFilled } from \"react-icons/vsc\";\r\n\r\nexport default function GameBoard() {\r\n  const answer = [\"red\", \"green\", \"blue\", \"yellow\", \"purple\"]\r\n  const [blackPegs, setBlackPegs] = useState([0, 0, 0, 0, 0, 0])\r\n  const [whitePegs, setWhitePegs] = useState([0, 0, 0, 0, 0, 0])\r\n\r\n  const [turnNum, setTurnNum] = useState(1)\r\n  const [chosenColor, setChosenColor] = useState(\"red\")\r\n  const [guessPegColors, setGuessPegColors] = useState([\r\n    [\"grey\", \"grey\", \"grey\", \"grey\", \"grey\"],\r\n    [\"grey\", \"grey\", \"grey\", \"grey\", \"grey\"],\r\n    [\"grey\", \"grey\", \"grey\", \"grey\", \"grey\"],\r\n    [\"grey\", \"grey\", \"grey\", \"grey\", \"grey\"],\r\n    [\"grey\", \"grey\", \"grey\", \"grey\", \"grey\"],\r\n    [\"grey\", \"grey\", \"grey\", \"grey\", \"grey\"],\r\n  ]);\r\n  const [turnDisplay, setTurnDisplay] = useState(\"Turn: 1\")\r\n  const [gameOver, setGameOver] = useState(false)\r\n\r\n  const handleColorPick = color => {\r\n    setChosenColor(color)\r\n  }\r\n\r\n  const handleGuessPegColorChange = (rowNum, colNum) => {\r\n    if (rowNum == (turnNum-1)) {\r\n      setGuessPegColors((prevState) => {\r\n        prevState[rowNum][colNum] = chosenColor\r\n        return {\r\n          ...prevState\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleSubmit = () => {\r\n    if (gameOver == false && ! guessPegColors[turnNum-1].includes(\"grey\")) {\r\n      let win = false\r\n      if (JSON.stringify(guessPegColors[turnNum-1]) === JSON.stringify(answer)) {\r\n        win = true\r\n        setGameOver(true)\r\n      } else {\r\n          let tempAnswer = answer.slice()\r\n          let whiteCheck = []\r\n          let blackCount = 0\r\n          for (let i=0;i<5;i++) {\r\n            if (guessPegColors[turnNum-1][i] == answer[i]) {\r\n                tempAnswer[i] = \"tan\"\r\n                blackCount += 1\r\n            } else {\r\n              whiteCheck.push(guessPegColors[turnNum-1][i]);\r\n            }                  \r\n          }\r\n\r\n          let whiteCount = 0\r\n          for (let i=0;i<tempAnswer.length;i++) {\r\n            if (whiteCheck.includes(tempAnswer[i])) {\r\n              whiteCheck[whiteCheck.indexOf(tempAnswer[i])] = 0\r\n              whiteCount += 1\r\n            }\r\n          }\r\n\r\n          setBlackPegs((prevState) => {\r\n            prevState[turnNum-1] = blackCount\r\n            return {\r\n              ...prevState\r\n            }\r\n          })\r\n\r\n          setWhitePegs((prevState) => {\r\n            prevState[turnNum-1] = whiteCount\r\n            return {\r\n              ...prevState\r\n            }\r\n          })\r\n        }\r\n\r\n        setTurnDisplay(() => {\r\n          if (win === true) {\r\n            return ( \"You won on turn \"  + (turnNum).toString() )\r\n          } else if (turnNum == 6) {\r\n            return ( \"You lost. Answer was: \" + answer)\r\n          } else {\r\n            return ( \"Turn: \" + (turnNum+1).toString() )\r\n          }\r\n        })\r\n\r\n        if (turnNum == 6) {\r\n          setGameOver(true)\r\n        }\r\n\r\n        setTurnNum(turnNum+1)\r\n    }\r\n  }\r\n\r\n\r\n  return(\r\n    <div>\r\n      <table>\r\n        <tr>\r\n          <PegGrid\r\n            handleColorPick={handleColorPick}\r\n            guessPegColors={guessPegColors}\r\n            handleGuessPegColorChange={handleGuessPegColorChange}\r\n            blackPegs={blackPegs}\r\n            whitePegs={whitePegs}\r\n          />\r\n        </tr>\r\n        <tr>\r\n          <td>\r\n            <label>{turnDisplay}</label>\r\n            <button>Reset</button>\r\n            <button type=\"submit\"\r\n              onClick={() => {\r\n                handleSubmit();\r\n              }}>\r\n            Submit</button>\r\n            \r\n            <VscCircleLargeFilled color={chosenColor} className=\"color-picker\"/>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  )\r\n}","import GameBoard from \"./GameBoard\"\r\n\r\nexport default function GameContainer() {\r\n  return(\r\n    <div className=\"container\">\r\n      <h1>Codebreaker</h1>\r\n      <GameBoard />\r\n    </div>\r\n  )\r\n}","import './App.css';\nimport GameContainer from \"./GameContainer\"\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <GameContainer />\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}